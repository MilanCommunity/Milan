name: E2E Tests + Preview deploy

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  DEPLOY_PR_FROM_FORK: true


on:
  pull_request_target:
    types: [opened, synchronize, reopened]

jobs:
  cypress-run:
    runs-on: ubuntu-latest
    # use docker container to run tests
    container: cypress/browsers:node18.12.0-chrome107
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: set environment variables
        uses: allenevans/set-env@v2.0.0
        with:
          HUSKY: 0

      - name: "Cypress Tests - Chrome"
        uses: cypress-io/github-action@v4.2.0
        with:
          install: true
          build: npm run build
          start: npm run dev
          wait-on: "http://localhost:3000"
          wait-on-timeout: 120
          browser: chrome
          spec: cypress/e2e/*
        env:
          CI: "false"

  Deploy-Preview:
    needs: cypress-run
    if: success()
    runs-on: ubuntu-latest

    steps:
      - id: script
        uses: actions/github-script@v3
        with:
          script: |
            const isPr = [ 'pull_request', 'pull_request_target' ].includes(context.eventName)
            core.setOutput('ref', isPr ? context.payload.pull_request.head.ref : context.ref)
            core.setOutput('repo', isPr ? context.payload.pull_request.head.repo.full_name : context.repo.full_name)
            
      

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ steps.script.outputs.repo }}


      # - name: Check if Branch Exists
      #   run: |
      #     const octokit = require('@octokit/rest');
      #     octokit.authenticate({
      #       type: 'token',
      #       token: ${{ secrets.GITHUB_TOKEN }}
      #     });
      #     const branchExists = await octokit.repos.getBranch({
      #       owner: context.payload.pull_request.head.repo.owner.login,
      #       repo: context.payload.pull_request.head.repo.name,
      #       branch: context.payload.pull_request.head.ref
      #     });
      #     if (!branchExists) {
      #       core.setFailed(`Branch ${context.payload.pull_request.head.ref} does not exist`);
      #     }

      
      - name: Create Branch
        uses: peterjgrainger/action-create-branch@v2.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          branch: '${{ github.event.pull_request.head.ref }}'
          sha: '${{ github.event.pull_request.head.sha }}'
          
      - name: Deploy to Vercel Action
        uses: BetaHuhn/deploy-to-vercel-action@latest
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          DEPLOY_PR_FROM_FORK: true


      - name: Delete branch
        if: ${{github.event.pull_request.head.ref !='main' && github.event.action == 'closed' && github.event.pull_request.merged == true }}
        uses: dawidd6/action-delete-branch@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branches: ${{ github.event.pull_request.head.ref }}
